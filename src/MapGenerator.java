
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Random;
import java.util.Scanner;
import java.util.TreeMap;

public class MapGenerator implements TextGenerator {
	private TrainingText text;
	private Random rand;
	private HashMap<NGram, ArrayList<NGram>> kmap;

	public MapGenerator() {
		rand = new Random();
		// initializes random
	}

	public MapGenerator(int n) {
		rand = new Random(n);
		//initializes a random value based on a specified range
	}

	public int train(Scanner source, String delimiter, int k) {
		text = new TrainingText(source, delimiter, k);
		kmap = new HashMap<NGram, ArrayList<NGram>>();
		//creates text and kmap which is a map of the seeds and the possible character combinations that could follow them.
		for (int i = 0; i < text.size() - 1; i++) {
			NGram currentSeed = text.get(i);
			if (kmap.containsKey(currentSeed)) {
				kmap.get(currentSeed).add(text.get(i + 1));
			} else {
				ArrayList<NGram> ls = new ArrayList<NGram>();
				ls.add(text.get(i + 1));
				kmap.put(currentSeed, ls);
			}
		}
		return kmap.keySet().size();
		//creates the map
	}
	

	public String generateText(int length) {
		//generates a string of text of length, length using the previously created map.
		StringBuilder output = new StringBuilder();
		int start = rand.nextInt(text.size());
		//String finstring = "";
		NGram seed = text.get(start);
		for (int i = 0; i < length; i++) {
			int n = rand.nextInt(kmap.get(seed).size());
			seed = kmap.get(seed).get(n);
			output.append(seed);
			//finstring += seed.toString();
		}
		//returns a string generated by the generateText method
		return output.toString();
	}
}
